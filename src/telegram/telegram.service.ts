import { Injectable, Logger } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { InjectModel } from '@nestjs/mongoose'
import axios from 'axios'
import { Model } from 'mongoose'
import { Candidate } from '../candidates/entities/candidate.schema'
import { City } from '../cities/entities/city.schema'
import { Status } from '../statuses/entities/status.schema'
import { User } from '../users/entities/user.schema'

@Injectable()
export class TelegramService {
  private readonly logger = new Logger(TelegramService.name);
  private readonly botToken: string;
  private readonly chatId: string;

  constructor(
    private readonly configService: ConfigService,
    @InjectModel(City.name) private cityModel: Model<City>,
    @InjectModel(User.name) private userModel: Model<User>,
    @InjectModel(Status.name) private statusModel: Model<Status>,
  ) {
    this.botToken = this.configService.get<string>('TELEGRAM_BOT_TOKEN');
    this.chatId = this.configService.get<string>('TELEGRAM_CHAT_ID');
    
    // Debug logging
    this.logger.debug(`Bot Token: ${this.botToken ? 'Configured' : 'Not configured'}`);
    this.logger.debug(`Chat ID: ${this.chatId ? 'Configured' : 'Not configured'}`);
  }

  async sendCandidateNotification(candidate: Candidate, action: 'created' | 'updated'): Promise<void> {
    try {
      const city = await this.cityModel.findById(candidate.city).lean();
      const creator = await this.userModel.findById(candidate.createdBy).lean();
      const status = await this.statusModel.findById(candidate.status).lean();

      const message = this.formatCandidateMessage(candidate, action, city?.name, creator?.firstName, status?.name);
      await this.sendMessage(message);
    } catch (error) {
      this.logger.error(`Failed to send Telegram notification: ${error.message}`);
      if (error.response) {
        this.logger.error(`Response data: ${JSON.stringify(error.response.data)}`);
      }
    }
  }

  private formatCandidateMessage(
    candidate: Candidate, 
    action: 'created' | 'updated',
    cityName: string,
    creatorName: string,
    statusName: string
  ): string {
    const actionEmoji = action === 'created' ? 'üÜï' : 'üìù';
    const actionText = action === 'created' ? '—Å–æ–∑–¥–∞–Ω' : '–æ–±–Ω–æ–≤–ª–µ–Ω';
    const createdAt = new Date(candidate.createdAt).toLocaleString('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `
${actionEmoji} –ö–∞–Ω–¥–∏–¥–∞—Ç ${actionText}!

üë§ –ò–º—è: ${candidate.firstName} ${candidate.lastName} ${candidate.middleName || ''}
üìß Email: ${candidate.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${candidate.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè¢ –ì–æ—Ä–æ–¥: ${cityName || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üíº –ü–æ–∑–∏—Ü–∏—è: ${candidate.position || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${candidate.salary ? `${candidate.salary} –≥—Ä–Ω` : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${candidate.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
üë• –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: ${candidate.employmentType || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üë®‚Äçüíº –°–æ–∑–¥–∞–ª: ${creatorName || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: ${candidate.interviewDate ? new Date(candidate.interviewDate).toLocaleDateString('uk-UA') : '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞'}
üìä –°—Ç–∞—Ç—É—Å: ${statusName || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –°–æ–∑–¥–∞–Ω: ${createdAt}
`;
  }

  private async sendMessage(message: string): Promise<void> {
    try {
      if (!this.botToken || !this.chatId) {
        throw new Error('Telegram bot token or chat ID not configured');
      }

      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;
      this.logger.debug(`Sending message to URL: ${url}`);
      
      const response = await axios.post(url, {
        chat_id: this.chatId,
        text: message,
        parse_mode: 'HTML',
      });
      
      this.logger.debug(`Message sent successfully: ${response.status}`);
    } catch (error) {
      this.logger.error(`Failed to send message to Telegram: ${error.message}`);
      if (error.response) {
        this.logger.error(`Response data: ${JSON.stringify(error.response.data)}`);
      }
      throw error;
    }
  }
} 