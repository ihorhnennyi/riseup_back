import { Logger, ValidationPipe } from '@nestjs/common'
import { ConfigService } from '@nestjs/config'
import { NestFactory } from '@nestjs/core'
import { AppModule } from './app.module'
import { HttpExceptionFilter } from './common/filters/http-exception.filter'
import { setupSwagger } from './config/swagger.config'

async function bootstrap() {
  const logger = new Logger('–ó–∞–ø—É—Å–∫');
  
  try {
    const app = await NestFactory.create(AppModule, {
      logger: ['error', 'warn', 'log', 'debug', 'verbose'],
    });

    // Enable CORS
    app.enableCors({
      origin: true,
      methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
      credentials: true,
    });

    // Global prefix
    app.setGlobalPrefix('api/v1');

    // Global filters and pipes
    app.useGlobalFilters(new HttpExceptionFilter());
    app.useGlobalPipes(new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }));

    // Setup Swagger documentation
    setupSwagger(app);

    const configService = app.get(ConfigService);
    const port = configService.get<number>('PORT', 8000);

    // –í–∫–ª—é—á–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    app.use((req, res, next) => {
      logger.debug(`–í—Ö—ñ–¥–Ω–∏–π ${req.method} –∑–∞–ø–∏—Ç –¥–æ ${req.url}`);
      logger.debug(`–ó–∞–≥–æ–ª–æ–≤–∫–∏: ${JSON.stringify(req.headers)}`);
      next();
    });

    await app.listen(port);
    
    logger.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞: http://localhost:${port}`);
    logger.log(`üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:${port}/api/v1`);
    logger.log(`üî• –î–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î –≤ —Ä–µ–∂–∏–º—ñ ${configService.get('NODE_ENV', 'development')}`);
  } catch (error) {
    logger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, error.stack);
    process.exit(1);
  }
}

bootstrap();
